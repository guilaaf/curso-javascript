{"version":3,"sources":["../../app-src/services/ConnectionFactory.js"],"names":["ConnectionFactory","databaseName","databaseVersion","databaseStores","connection","closeFunction","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","evt","target","result","onsuccess","close","bind","onerror","console","log","error","name","conn","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,eAAe,YAArB;AACA,QAAMC,kBAAkB,CAAxB;AACA,QAAMC,iBAAiB,CAAC,aAAD,CAAvB;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,gBAAgB,IAApB;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIL,UAAJ,EAAgB;AACZI,gCAAQJ,UAAR;AACH;;AAED,wBAAIM,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,YAAtB,EAAoCC,eAApC,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,eAAO;AACjCd,0CAAkBe,aAAlB,CAAgCC,IAAIC,MAAJ,CAAWC,MAA3C;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,eAAO;AAC3Bf,qCAAaY,IAAIC,MAAJ,CAAWC,MAAxB;AACAb,wCAAgBD,WAAWgB,KAAX,CAAiBC,IAAjB,CAAsBjB,UAAtB,CAAhB;AACAA,mCAAWgB,KAAX,GAAmB,YAAW;AAC1B,kCAAM,IAAId,KAAJ,CAAU,qCAAV,CAAN;AACH,yBAFD;AAGAE,gCAAQJ,UAAR;AACH,qBAPD;;AASAM,gCAAYY,OAAZ,GAAsB,eAAO;AACzBC,gCAAQC,GAAR,CAAYR,IAAIC,MAAJ,CAAWQ,KAAvB;AACAhB,+BAAOO,IAAIC,MAAJ,CAAWQ,KAAX,CAAiBC,IAAxB;AACH,qBAHD;AAIH,iBAxBM,CAAP;AAyBH;AAhCL;AAAA;AAAA,8CAkC6B;AACrB,oBAAItB,UAAJ,EAAgB;AACZC;AACAA,oCAAgB,IAAhB;AACAD,iCAAa,IAAb;AACH;AACJ;AAxCL;AAAA;AAAA,0CA0CyBuB,IA1CzB,EA0C+B;AACvBJ,wBAAQC,GAAR,CAAYtB,oBAAoB,CAApB,GAAwB,0BAAxB,GAAqD,4BAAjE;AACAC,+BAAeyB,OAAf,CAAuB,iBAAS;AAC5B,wBAAID,KAAKE,gBAAL,CAAsBC,QAAtB,CAA+BC,KAA/B,CAAJ,EAA2C;AACvCJ,6BAAKK,iBAAL,CAAuBD,KAAvB;AACH;AACDJ,yBAAKM,iBAAL,CAAuBF,KAAvB,EAA8B,EAACG,eAAe,IAAhB,EAA9B;AACH,iBALD;AAMH;AAlDL;;AAAA;AAAA;AAqDH,CA7DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\n\n    const databaseName = 'aluraframe';\n    const databaseVersion = 1;\n    const databaseStores = ['negociacoes'];\n    var connection = null;\n    var closeFunction = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error('ConnectionFactory can not be instatiated');\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                if (connection) {\n                    resolve(connection);\n                }\n\n                let openRequest = window.indexedDB.open(databaseName, databaseVersion);\n\n                openRequest.onupgradeneeded = evt => {\n                    ConnectionFactory._createStores(evt.target.result);\n                };\n\n                openRequest.onsuccess = evt => {\n                    connection = evt.target.result;\n                    closeFunction = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new Error(\"you can't call this method directly\");\n                    };\n                    resolve(connection);\n                };\n\n                openRequest.onerror = evt => {\n                    console.log(evt.target.error);\n                    reject(evt.target.error.name);\n                };\n            });\n        }\n        \n        static closeConnection() {\n            if (connection) {\n                closeFunction();\n                closeFunction = null;\n                connection = null;\n            }\n        }\n\n        static _createStores(conn) {\n            console.log(databaseVersion === 1 ? 'criando o banco de dados' : 'alterando o banco de dados');\n            databaseStores.forEach(store => {\n                if (conn.objectStoreNames.contains(store)) {\n                    conn.deleteObjectStore(store);\n                }\n                conn.createObjectStore(store, {autoIncrement: true});\n            });\n        }\n    }\n\n})();\n\n"]}