{"version":3,"sources":["../../app-src/dao/ConnectionFactory.js"],"names":["databaseName","databaseVersion","databaseStores","connection","closeFunction","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","evt","target","result","onsuccess","close","bind","onerror","console","log","error","name","conn","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,wB,GAAe,Y;AACfC,2B,GAAkB,C;AAClBC,0B,GAAiB,CAAC,aAAD,C;AACnBC,sB,GAAa,I;AACbC,yB,GAAgB,I;;yCAEPC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIN,UAAJ,EAAgB;AACZK,wCAAQL,UAAR;AACH;;AAED,gCAAIO,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,YAAtB,EAAoCC,eAApC,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,eAAO;AACjCT,kDAAkBU,aAAlB,CAAgCC,IAAIC,MAAJ,CAAWC,MAA3C;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,eAAO;AAC3BhB,6CAAaa,IAAIC,MAAJ,CAAWC,MAAxB;AACAd,gDAAgBD,WAAWiB,KAAX,CAAiBC,IAAjB,CAAsBlB,UAAtB,CAAhB;AACAA,2CAAWiB,KAAX,GAAmB,YAAW;AAC1B,0CAAM,IAAId,KAAJ,CAAU,qCAAV,CAAN;AACH,iCAFD;AAGAE,wCAAQL,UAAR;AACH,6BAPD;;AASAO,wCAAYY,OAAZ,GAAsB,eAAO;AACzBC,wCAAQC,GAAR,CAAYR,IAAIC,MAAJ,CAAWQ,KAAvB;AACAhB,uCAAOO,IAAIC,MAAJ,CAAWQ,KAAX,CAAiBC,IAAxB;AACH,6BAHD;AAIH,yBAxBM,CAAP;AAyBH;;;sDAEwB;AACrB,4BAAIvB,UAAJ,EAAgB;AACZC;AACAA,4CAAgB,IAAhB;AACAD,yCAAa,IAAb;AACH;AACJ;;;kDAEoBwB,I,EAAM;AACvBJ,gCAAQC,GAAR,CAAYvB,oBAAoB,CAApB,GAAwB,0BAAxB,GAAqD,4BAAjE;AACAC,uCAAe0B,OAAf,CAAuB,iBAAS;AAC5B,gCAAID,KAAKE,gBAAL,CAAsBC,QAAtB,CAA+BC,KAA/B,CAAJ,EAA2C;AACvCJ,qCAAKK,iBAAL,CAAuBD,KAAvB;AACH;AACDJ,iCAAKM,iBAAL,CAAuBF,KAAvB,EAA8B,EAACG,eAAe,IAAhB,EAA9B;AACH,yBALD;AAMH;;;;;;;;AACJ","file":"ConnectionFactory.js","sourcesContent":["const databaseName = 'aluraframe';\nconst databaseVersion = 1;\nconst databaseStores = ['negociacoes'];\nlet connection = null;\nlet closeFunction = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('ConnectionFactory can not be instatiated');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            if (connection) {\n                resolve(connection);\n            }\n\n            let openRequest = window.indexedDB.open(databaseName, databaseVersion);\n\n            openRequest.onupgradeneeded = evt => {\n                ConnectionFactory._createStores(evt.target.result);\n            };\n\n            openRequest.onsuccess = evt => {\n                connection = evt.target.result;\n                closeFunction = connection.close.bind(connection);\n                connection.close = function() {\n                    throw new Error(\"you can't call this method directly\");\n                };\n                resolve(connection);\n            };\n\n            openRequest.onerror = evt => {\n                console.log(evt.target.error);\n                reject(evt.target.error.name);\n            };\n        });\n    }\n\n    static closeConnection() {\n        if (connection) {\n            closeFunction();\n            closeFunction = null;\n            connection = null;\n        }\n    }\n\n    static _createStores(conn) {\n        console.log(databaseVersion === 1 ? 'criando o banco de dados' : 'alterando o banco de dados');\n        databaseStores.forEach(store => {\n            if (conn.objectStoreNames.contains(store)) {\n                conn.deleteObjectStore(store);\n            }\n            conn.createObjectStore(store, {autoIncrement: true});\n        });\n    }\n};\n"]}