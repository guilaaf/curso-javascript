{"version":3,"sources":["../../app-src/dao/NegociacaoDao.js"],"names":["ConnectionFactory","Negociacao","NegociacaoDao","connection","_store","Promise","resolve","reject","getConnection","then","negociacoes","cursor","transaction","objectStore","openCursor","onsuccess","item","evt","target","result","dados","value","push","_data","_quantidade","_valor","continue","onerror","console","log","error","catch","negociacao","request","add","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,6B,sBAAAA,iB;;AACAC,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AACpB,yBAAKC,MAAL,GAAc,aAAd;AACH;;;;kDAEa;AAAA;;AACV,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCP,8CAAkBQ,aAAlB,GACKC,IADL,CACU,sBAAc;AAChB,oCAAIC,cAAc,EAAlB;AACA,oCAAIC,SAASR,WACRS,WADQ,CACI,CAAC,MAAKR,MAAN,CADJ,EACmB,WADnB,EAERS,WAFQ,CAEI,MAAKT,MAFT,EAGRU,UAHQ,EAAb;;AAKAH,uCAAOI,SAAP,GAAmB,eAAO;AACtB,wCAAIC,OAAOC,IAAIC,MAAJ,CAAWC,MAAtB;AACA,wCAAIH,IAAJ,EAAU;AACN,4CAAII,QAAQJ,KAAKK,KAAjB;AACAX,oDAAYY,IAAZ,CAAiB,IAAIrB,UAAJ,CAAemB,MAAMG,KAArB,EAA4BH,MAAMI,WAAlC,EAA+CJ,MAAMK,MAArD,CAAjB;AACAT,6CAAKU,QAAL;AACH,qCAJD,MAIO;AACHpB,gDAAQI,WAAR;AACH;AACJ,iCATD;;AAWAC,uCAAOgB,OAAP,GAAiB,eAAO;AACpBC,4CAAQC,GAAR,CAAYZ,IAAIC,MAAJ,CAAWY,KAAvB;AACAvB,2CAAO,wCAAP;AACH,iCAHD;AAIH,6BAvBL,EAwBKwB,KAxBL,CAwBW,YAAM;AACTxB,uCAAO,sCAAP;AACH,6BA1BL;AA2BH,yBA5BM,CAAP;AA6BH;;;4CAEOyB,U,EAAY;AAAA;;AAChB,+BAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCP,8CAAkBQ,aAAlB,GACKC,IADL,CACU,sBAAc;AAChB,oCAAIwB,UAAU9B,WACTS,WADS,CACG,CAAC,OAAKR,MAAN,CADH,EACkB,WADlB,EAETS,WAFS,CAEG,OAAKT,MAFR,EAGT8B,GAHS,CAGLF,UAHK,CAAd;;AAKAC,wCAAQlB,SAAR,GAAoB,eAAO;AACvBa,4CAAQC,GAAR,CAAY,iCAAZ;AACAvB,4CAAQ0B,UAAR;AACH,iCAHD;;AAKAC,wCAAQN,OAAR,GAAkB,eAAO;AACrBC,4CAAQC,GAAR,CAAYZ,IAAIC,MAAJ,CAAWY,KAAvB;AACAvB,2CAAO,uCAAP;AACH,iCAHD;AAIH,6BAhBL,EAiBKwB,KAjBL,CAiBW,YAAM;AACTxB,uCAAO,uCAAP;AACH,6BAnBL;AAoBH,yBArBM,CAAP;AAsBH;;;6CAEQ;AAAA;;AACL,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCP,8CAAkBQ,aAAlB,GACKC,IADL,CACU,sBAAc;AAChB,oCAAIwB,UAAU9B,WACTS,WADS,CACG,CAAC,OAAKR,MAAN,CADH,EACkB,WADlB,EAETS,WAFS,CAEG,OAAKT,MAFR,EAGT+B,KAHS,EAAd;;AAKAF,wCAAQlB,SAAR,GAAoB,eAAO;AACvBa,4CAAQC,GAAR,CAAY,mCAAZ;AACAvB;AACH,iCAHD;;AAKA2B,wCAAQN,OAAR,GAAkB,eAAO;AACrBC,4CAAQC,GAAR,CAAYZ,IAAIC,MAAJ,CAAWY,KAAvB;AACAvB,2CAAO,yCAAP;AACH,iCAHD;AAIH,6BAhBL,EAiBKwB,KAjBL,CAiBW,YAAM;AACTxB,uCAAO,yCAAP;AACH,6BAnBL;AAoBH,yBArBM,CAAP;AAsBH","file":"NegociacaoDao.js","sourcesContent":["import {ConnectionFactory} from './ConnectionFactory';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoDao {\n    \n    constructor(connection) {\n        this._store = 'negociacoes';\n    }\n    \n    buscarTodos() {\n        return new Promise((resolve, reject) => {\n            ConnectionFactory.getConnection()\n                .then(connection => {\n                    let negociacoes = [];\n                    let cursor = connection\n                        .transaction([this._store], 'readwrite')\n                        .objectStore(this._store)\n                        .openCursor();\n\n                    cursor.onsuccess = evt => {\n                        let item = evt.target.result;\n                        if (item) {\n                            let dados = item.value;\n                            negociacoes.push(new Negociacao(dados._data, dados._quantidade, dados._valor));\n                            item.continue();\n                        } else {\n                            resolve(negociacoes);\n                        }\n                    };\n\n                    cursor.onerror = evt => {\n                        console.log(evt.target.error);\n                        reject('Não foi possível listar as negociações');\n                    };\n                })\n                .catch(() => {\n                    reject('Não foi possível listar a negociação');\n                });\n        });\n    }\n    \n    incluir(negociacao) {\n        return new Promise((resolve, reject) => {\n            ConnectionFactory.getConnection()\n                .then(connection => {\n                    let request = connection\n                        .transaction([this._store], 'readwrite')\n                        .objectStore(this._store)\n                        .add(negociacao);\n\n                    request.onsuccess = evt => {\n                        console.log('Negociação incluída com sucesso');\n                        resolve(negociacao);\n                    };\n\n                    request.onerror = evt => {\n                        console.log(evt.target.error);\n                        reject('Não foi possível incluir a negociação');\n                    };\n                })\n                .catch(() => {\n                    reject('Não foi possível incluir a negociação');\n                });\n        });\n    }\n    \n    limpar() {\n        return new Promise((resolve, reject) => {\n            ConnectionFactory.getConnection()\n                .then(connection => {\n                    let request = connection\n                        .transaction([this._store], 'readwrite')\n                        .objectStore(this._store)\n                        .clear();\n\n                    request.onsuccess = evt => {\n                        console.log('Negociações excluídas com sucesso');\n                        resolve();\n                    };\n\n                    request.onerror = evt => {\n                        console.log(evt.target.error);\n                        reject('Não foi possível excluir as negociações');\n                    };\n                })\n                .catch(() => {\n                    reject('Não foi possível excluir as negociações');\n                });\n        });\n    }\n}\n"]}